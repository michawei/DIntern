#!/usr/bin/env node
var io = require('socket.io');
io.disconnect;
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-isomorphic-server:server');
var http = require('http');
var mongoose = require('mongoose');

/* initial mongoose */
mongoose.connect('mongodb://localhost/chat-isomorphic-server:server', function(err) {
    if(err) {
        console.log('mongodb connection error', err);
    } else {
        console.log('mongodb connection successful');
    }
});

// use to delete all.
/*
mongoose.connection.collections['todos'].drop( function(err) {
    console.log('collection dropped');
});
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var users = [];
var messages = [];
var socket_user = {};

io = io.listen(server);
io.on('connection', function(socket){
  console.log('User connected. Socket id %s', socket.id);
  io.emit('chat', messages);
  io.emit('user', socket_user);

  socket.on('disconnect', function(){
    console.log('User disconnected. Socket id %s', socket.id);
    delete socket_user[socket.id];
    io.emit('user', socket_user);
  });

 /* socket.on('user' , function(_users){
    users = _users;
    socket_user[socket.id] = users[users.length-1];
    console.log(socket_user);
    io.emit('user', users);
  });*/

  socket.on('user' , function(_name){
    socket_user[socket.id] = _name;
    console.log(socket_user);
    io.emit('user', socket_user);
  });

  socket.on('chat' , function(_messages){
    messages = _messages;
    io.emit('chat', messages);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
